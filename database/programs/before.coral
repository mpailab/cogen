f arg thrm =
      infixr 6 x ** y = x^y
      prefix 7 //x # y// = x+y
      infixl 2 p:cases; ...  = p in cases
      r = a:b;c;d
      {-
        Comment 1
      -}
      case thrm of
        forall [boundVariables vars, premises prems, conclusion [concl]] where vars == thrm
        do
          h [plus[_,x]] | h [x] = concl where h in [equality, equivalence] -- comment 2
            x == y      -- comment 3
          f = \x y -> x++y
          Efgh = f` x y -- call f x y
          d = (g` x) y ** //z # v//
          c = (\x -> f` x + x)` [a,b,c]
          Abcd = (if a then h else f)` abcd` y
          Identification << {
            describe = type
            $b ++ other ~= $list`
          }
          G = case t `g` of {f [a,b] -> g [b,a]; [__,c] -> g [e,c]; _ g -> g; _ -> s}
          x_header [equality [a&(plus [p&x1, x2]), b@(plus` [x3, x1])]] <- x
        done
      yield f` a+b-c+d` b
    done
done
