[Rule {
  symbol      = "pls",
  theorem     = forall[$x2,$x3,$x4,$x5,$x6,equal[drob[$x2,multiplication[$x6,stepen[drob[$x3,$x5],$x4]]],drob[multiplication[$x2,stepen[drob[$x5,$x3],$x4]],$x6]]],
  header      = problemtype,
  filters     = [
    scanLevel[two],
    or[not[problemtype[preobrazovat]],not[problemGoal[normIntegral]]]
  ],
  specifiers  = [
    normalizator,
    edinica[one,$x6],
    zamenaznaka[minus,$x3]
  ],
  normalizers = [
    bistrpreobr[fiks[zero,two],normdrob],
    bistrpreobr[fiks[zero,two,one],normumnozhenie],
    bistrpreobr[stepen[drob[$x5,$x3],$x4],normstepen],
    bistrpreobr[drob[$x5,$x3],normdrob]
  ]
},Rule {
  symbol      = "pls",
  theorem     = forall[$x40,$x1,$x2,equal[plsvsekh[otobrazhenie[$x9,znachenie[$x40,$x9],pls[znachenie[$x1,$x9],znachenie[$x2,$x9]]]],pls[plsvsekh[otobrazhenie[$x9,znachenie[$x40,$x9],znachenie[$x1,$x9]]],plsvsekh[otobrazhenie[$x9,znachenie[$x40,$x9],znachenie[$x2,$x9]]]]]],
  header      = replace[secondsubterm,normekv],
  filters     = [scanLevel[one]],
  specifiers  = [
    tupleOfVariables[$x9],
    operand[$x1,fiks[zero,one,one,three]],
    otobrazhenie[$x1,$x2,$x40]
  ],
  normalizers = [bistrpreobr[fiks[zero,two],normpls]]
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,$x3,$x13,$x14,$x11,$x4,esli,equal[pls[znachenie[$x2,$x9],znachenie[$x3,$x9]],$x4],mensheiliravno[$x11,$x13],to,equal[pls[plsvsekh[otobrazhenie[$x9,and[celoe[$x9],mensheiliravno[$x11,$x9],mensheiliravno[$x9,$x14]],kn[znachenie[$x1,$x9],znachenie[$x2,$x9]]]],plsvsekh[otobrazhenie[$x10,and[celoe[$x10],mensheiliravno[$x13,$x10],mensheiliravno[$x10,$x14]],kn[znachenie[$x1,$x10],znachenie[$x3,$x10]]]]],pls[plsvsekh[otobrazhenie[$x9,and[celoe[$x9],mensheiliravno[$x11,$x9],mensheiliravno[$x9,plus[$x13,minus[one]]]],kn[znachenie[$x1,$x9],znachenie[$x2,$x9]]]],kn[plsvsekh[otobrazhenie[$x9,and[celoe[$x9],mensheiliravno[$x13,$x9],mensheiliravno[$x9,$x14]],znachenie[$x1,$x9]]],$x4]]]],
  header      = replace[secondsubterm,normdvkonst],
  filters     = [
    scanLevel[two],
    not[in[$x9,$x4]],
    celoe[$x11],
    celoe[$x13]
  ],
  specifiers  = [
    identifikator[one],
    programma[two],
    operand[$x1,fiks[zero,one,one,one,three]],
    operand[$x1,fiks[zero,one,two,one,three]],
    otobrazhenie[$x1,$x2,$x3]
  ],
  normalizers = [
    bistrpreobr[plus[$x13,minus[one]],normplyus],
    bistrpreobr[fiks[one,one],zadacha[four,uprostit],posilki[and[celoe[$x9],mensheiliravno[$x13,$x9],mensheiliravno[$x9,$x14]]]],
    bistrpreobr[fiks[zero,two],normpls],
    bistrpreobr[fiks[zero,two,two],normkn]
  ]
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,$x3,$x11,$x14,esli,equal[$x3,znachenie[$x1,plus[$x11,minus[one]]]],to,equal[pls[kn[$x2,$x3],kn[$x2,plsvsekh[otobrazhenie[$x9,and[celoe[$x9],mensheiliravno[$x11,$x9],mensheiliravno[$x9,$x14]],znachenie[$x1,$x9]]]]],kn[$x2,plsvsekh[otobrazhenie[$x9,and[celoe[$x9],mensheiliravno[plus[$x11,minus[one]],$x9],mensheiliravno[$x9,$x14]],znachenie[$x1,$x9]]]]]],
  header      = replace[secondsubterm,uproschdn],
  filters     = [
    scanLevel[two],
    celoe[$x11]
  ],
  specifiers  = [
    identifikator[one],
    otobrazhenie[$x1],
    edinica[one,$x2]
  ],
  normalizers = [
    bistrpreobr[fiks[one,two,two],normplyus],
    bistrpreobr[fiks[one,two],zadacha[four,uprostit]]
  ]
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,equal[ekv[$x1,otr[$x2]],pls[$x1,$x2]]],
  header      = secondsubterm,
  filters     = [],
  specifiers  = [],
  normalizers = [bistrpreobr[pls[$x1,$x2],normpls]]
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,equal[dn[kn[$x1,otr[$x2]],kn[$x2,otr[$x1]]],pls[$x1,$x2]]],
  header      = replace[secondsubterm,standdn],
  filters     = [],
  specifiers  = [otricanie[otr,$x2,$x1]],
  normalizers = [bistrpreobr[fiks[zero,two],normpls]]
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,$x3,equal[dn[kn[$x1,otr[$x2]],kn[$x2,dn[otr[$x1],$x3]]],dn[pls[$x1,$x2],kn[$x2,$x3]]]],
  header      = teorvivod,
  filters     = [],
  specifiers  = [otricanie[otr,$x1,$x2]],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,$x3,equal[dn[kn[$x3,otr[$x1],otr[$x2]],kn[dn[$x1,$x2],otr[$x3]]],pls[dn[$x1,$x2],$x3]]],
  header      = tipdannikh,
  filters     = [],
  specifiers  = [otricanie[otr,$x1,$x2,$x3]],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,equal[dn[kn[$x1,otr[$x2]],otr[dn[$x1,otr[$x2]]]],pls[$x1,$x2]]],
  header      = replace[secondsubterm,normkn],
  filters     = [],
  specifiers  = [
    scanLevel[one],
    otricanie[otr,$x1,$x2]
  ],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,equal[dn[$x2,pls[$x1,$x2]],dn[$x1,$x2]]],
  header      = replace[secondsubterm,standdn],
  filters     = [],
  specifiers  = [pusto],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,$x3,equal[kn[$x2,pls[$x1,kn[$x2,$x3]]],kn[$x2,pls[$x1,$x3]]]],
  header      = secondsubterm,
  filters     = [],
  specifiers  = [],
  normalizers = [bistrpreobr[pls[$x1,$x3],normpls]]
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,equal[kn[$x1,pls[$x2,otr[$x1]]],kn[$x1,$x2]]],
  header      = replace[secondsubterm,standdn],
  filters     = [],
  specifiers  = [otricanie[otr,$x1]],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,equal[kn[dn[$x1,$x2],dn[otr[$x1],otr[$x2]]],pls[$x1,$x2]]],
  header      = odz,
  filters     = [],
  specifiers  = [otricanie[otr,$x1,$x2]],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,equal[plsvekt[$x1,$x2,$x2],$x1]],
  header      = secondsubterm,
  filters     = [scanLevel[zero]],
  specifiers  = [],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = razdel[pls,algebralogiki],
  header      = secondsubterm,
  filters     = [],
  specifiers  = [info],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = kommutativno[pls],
  header      = otr,
  filters     = [],
  specifiers  = [scanLevel[three]],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,$x3,ekvivalentno[equal[otr[pls[$x1,$x2]],pls[$x2,$x3]],equal[otr[$x1],$x3]]],
  header      = razdel,
  filters     = [scanLevel[zero]],
  specifiers  = [edinica[zero,$x3]],
  normalizers = [bistrpreobr[otr[$x1],normotr]]
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,$x3,ekvivalentno[equal[pls[$x1,$x2],pls[$x1,$x3]],equal[$x2,$x3]]],
  header      = info,
  filters     = [scanLevel[zero]],
  specifiers  = [edinica[zero,$x3]],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,$x3,$x4,esli,equal[pls[$x1,$x3],$x2],to,ekvivalentno[equal[pls[$x1,$x4],$x2],equal[$x3,$x4]]],
  header      = replace[secondsubterm,uproschpls],
  filters     = [
    scanLevel[two],
    not[konstanta[$x1]],
    premise,
    is_root
  ],
  specifiers  = [],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,ekvivalentno[equal[pls[$x1,$x2],zero],equal[$x1,$x2]]],
  header      = replace[secondsubterm,normekv],
  filters     = [
    scanLevel[one],
    not[subset[freeVariables[$x1],freeVariables[$x2]]]
  ],
  specifiers  = [],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,$x26,$x27,ekvivalentno[forall[$x23,esli,equal[pls[znachenie[$x1,$x23],znachenie[$x2,$x23]],one],znachenie[$x26,$x23],to,znachenie[$x27,$x23]],forall[$x23,esli,znachenie[$x26,$x23],not[znachenie[$x27,$x23]],to,equal[znachenie[$x1,$x23],znachenie[$x2,$x23]]]]],
  header      = secondsubterm,
  filters     = [
    scanLevel[one],
    or[not[header[fiks[zero,one,six],equal]],kontekst[vid[fiks[zero,one,six],equal[$x4,one]],header[$x4,pls]]],
    or[not[problemtype[dokazat]],premise]
  ],
  specifiers  = [
    tupleOfVariables[$x23],
    otobrazhenie[$x1,$x2,$x26,$x27],
    vneshnijkvantor[fiks[zero,one]]
  ],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,ekvivalentno[equal[pls[otr[$x1],$x2],one],equal[$x1,$x2]]],
  header      = replace[secondsubterm,uproschkn],
  filters     = [scanLevel[one]],
  specifiers  = [],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,$x3,ekvivalentno[equal[pls[$x1,$x2],pls[otr[$x1],$x3]],equal[$x2,otr[$x3]]]],
  header      = secondsubterm,
  filters     = [scanLevel[one]],
  specifiers  = [edinica[zero,$x2,$x3]],
  normalizers = [bistrpreobr[otr[$x3],normotr]]
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,equal[pls[$x1,zero],$x1]],
  header      = replace[secondsubterm,standdn],
  filters     = [],
  specifiers  = [scanLevel[one]],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,equal[pls[$x1,$x1],zero]],
  header      = replace[secondsubterm,sokraschdnf],
  filters     = [],
  specifiers  = [pusto],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,equal[pls[otr[$x1],otr[$x2]],pls[$x1,$x2]]],
  header      = secondsubterm,
  filters     = [],
  specifiers  = [scanLevel[one]],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = forall[$x4,equal[pls[$x4,otr[$x4]],one]],
  header      = secondsubterm,
  filters     = [],
  specifiers  = [pusto],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,ekvivalentno[defined[pls,$x1,$x2],and[dvoichnoe[$x1],dvoichnoe[$x2]]]],
  header      = replace[secondsubterm,sokraschdnf],
  filters     = [],
  specifiers  = [info],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,ekvivalentno[defined[pls,$x1,$x2],and[dvoichnoe[$x1],dvoichnoe[$x2]]]],
  header      = secondsubterm,
  filters     = [],
  specifiers  = [tipdannikh[dvoichnoe,dvoichnoe]],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = problemtype[pls,dvoichnoe],
  header      = oblast,
  filters     = [],
  specifiers  = [info],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = associativno[pls],
  header      = replace[secondsubterm,normotr],
  filters     = [],
  specifiers  = [info],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = kommutativno[pls],
  header      = secondsubterm,
  filters     = [],
  specifiers  = [info],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,esli,dvoichnoe[$x1],to,equal[pls[$x1,zero],$x1]],
  header      = secondsubterm,
  filters     = [],
  specifiers  = [info],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,esli,dvoichnoe[$x1],to,equal[pls[$x1,zero],$x1]],
  header      = secondsubterm,
  filters     = [],
  specifiers  = [info],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = equal[arnost[pls],two],
  header      = secondsubterm,
  filters     = [],
  specifiers  = [info],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = standforma[pls,standpls],
  header      = replace[secondsubterm,standdn],
  filters     = [],
  specifiers  = [info],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,equal[dn[$x1,$x2],pls[kn[$x1,$x2],$x1,$x2]]],
  header      = oblast,
  filters     = [],
  specifiers  = [scanLevel[one]],
  normalizers = [
    bistrpreobr[$x1,standpls[condition[not[variableQ[$x1]]]]],
    bistrpreobr[$x2,standpls[condition[not[variableQ[$x2]]]]],
    bistrpreobr[kn[$x1,$x2],normkn],
    bistrpreobr[fiks[zero,two],normpls]
  ]
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,equal[imp[$x1,$x2],pls[kn[$x1,$x2],$x1,one]]],
  header      = edinica[one,two],
  filters     = [],
  specifiers  = [scanLevel[one]],
  normalizers = [
    bistrpreobr[$x1,standpls[condition[not[variableQ[$x1]]]]],
    bistrpreobr[$x2,standpls[condition[not[variableQ[$x2]]]]],
    bistrpreobr[kn[$x1,$x2],normkn],
    bistrpreobr[fiks[zero,two],normpls]
  ]
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,equal[otr[$x1],pls[$x1,one]]],
  header      = arnost,
  filters     = [],
  specifiers  = [scanLevel[one]],
  normalizers = [bistrpreobr[fiks[zero,two],normpls]]
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,$x3,equal[kn[$x1,pls[$x2,$x3]],pls[kn[$x1,$x2],kn[$x1,$x3]]]],
  header      = replace[secondsubterm,normekv],
  filters     = [],
  specifiers  = [
    scanLevel[two],
    nabor[firstsubterm]
  ],
  normalizers = [
    bistrpreobr[fiks[zero,two],normpls],
    bistrpreobr[kn[$x1,$x2],normkn,standpls],
    bistrpreobr[kn[$x1,$x3],normkn,standpls]
  ]
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,equal[pls[$x1,$x1],zero]],
  header      = secondsubterm,
  filters     = [],
  specifiers  = [scanLevel[one]],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,equal[pls[$x1,zero],$x1]],
  header      = replace[secondsubterm,uproschimp],
  filters     = [],
  specifiers  = [scanLevel[one]],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = kommutativno[pls],
  header      = replace[secondsubterm,normimp],
  filters     = [scanLevel[zero,three]],
  specifiers  = [],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = kommutativno[pls],
  header      = secondsubterm,
  filters     = [scanLevel[zero]],
  specifiers  = [],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,$x23,ekvivalentno[equal[pls[$x1,$x23],$x2],equal[$x23,pls[$x1,$x2]]]],
  header      = replace[secondsubterm,sokraschdnf],
  filters     = [
    scanLevel[zero],
    condition,
    problemtype[opisat],
    is_root,
    problemUnknown[$x23],
    izvestno[$x1],
    izvestno[$x2]
  ],
  specifiers  = [],
  normalizers = [bistrpreobr[pls[$x1,$x2],normpls]]
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,equal[pls[$x1,zero],$x1]],
  header      = replace[secondsubterm,standdn],
  filters     = [scanLevel[zero]],
  specifiers  = [],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,equal[pls[$x1,$x1],zero]],
  header      = secondsubterm,
  filters     = [scanLevel[zero]],
  specifiers  = [],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,equal[kn[otr[$x2],pls[$x1,$x2]],kn[$x1,otr[$x2]]]],
  header      = secondsubterm,
  filters     = [scanLevel[zero]],
  specifiers  = [otricanie[otr,$x2]],
  normalizers = [
    bistrpreobr[kn[$x1,otr[$x2]],normkn],
    bistrpreobr[otr[$x2],normotr]
  ]
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,$x3,equal[kn[$x2,pls[$x1,kn[$x2,$x3]]],kn[$x2,pls[$x1,$x3]]]],
  header      = secondsubterm,
  filters     = [scanLevel[zero]],
  specifiers  = [],
  normalizers = [
    bistrpreobr[kn[$x2,pls[$x1,$x3]],normkn],
    bistrpreobr[pls[$x1,$x3],normpls]
  ]
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,equal[imp[pls[$x1,$x2],$x2],imp[$x1,$x2]]],
  header      = replace[secondsubterm,standdn],
  filters     = [scanLevel[zero]],
  specifiers  = [],
  normalizers = [bistrpreobr[imp[$x1,$x2],normimp]]
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,equal[dn[$x2,pls[$x1,$x2]],dn[$x1,$x2]]],
  header      = replace[secondsubterm,standdn],
  filters     = [scanLevel[zero]],
  specifiers  = [],
  normalizers = [bistrpreobr[dn[$x1,$x2],normdn]]
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x23,esli,equal[$x23,$x1],to,equal[pls[$x1,$x23],zero]],
  header      = secondsubterm,
  filters     = [
    scanLevel[one],
    condition,
    problemtype[opisat],
    problemGoal[primer],
    problemUnknown[$x23],
    izvestno[$x1],
    back[not[kontekst[newcondition[$x2],in[$x23,$x2],not[kontekst[vid[$x2,dvoichnoe[$x23]]]]]]]
  ],
  specifiers  = [
    podborznachenij[one],
    newTermScan
  ],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,equal[pls[$x1,one],otr[$x1]]],
  header      = secondsubterm,
  filters     = [
    scanLevel[one],
    or[not[problemtype[preobrazovat]],not[problemGoal[standpls]]],
    not[header[$x1,pls]]
  ],
  specifiers  = [],
  normalizers = [bistrpreobr[otr[$x1],normotr]]
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,equal[pls[otr[$x1],otr[$x2]],pls[$x1,$x2]]],
  header      = vivod,
  filters     = [scanLevel[zero]],
  specifiers  = [],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,$x3,ekvivalentno[equal[pls[$x1,$x2],$x3],or[and[equal[$x1,zero],equal[$x2,$x3]],and[equal[$x1,one],equal[$x2,otr[$x3]]]]]],
  header      = podborznachenij,
  filters     = [
    scanLevel[three],
    problemtype[opisat],
    condition,
    not[izvestno[$x1]],
    not[izvestno[$x2]],
    izvestno[$x3]
  ],
  specifiers  = [newpremiselistcomment[razborsluchaev]],
  normalizers = [
    bistrpreobr[equal[$x1,zero],normusm],
    bistrpreobr[otr[$x3],normotr],
    bistrpreobr[fiks[zero,two],normlog]
  ]
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,$x3,esli,equal[plus[$x1,$x2],$x3],to,equal[pls[vichet[$x1,two],vichet[$x2,two]],vichet[$x3,two]]],
  header      = replace[secondsubterm,normdvkonst],
  filters     = [
    scanLevel[one],
    shorter[$x3,copy[plus[$x1,$x2]]]
  ],
  specifiers  = [identifikator[one]],
  normalizers = [bistrpreobr[fiks[one,one],zadacha[four,uprostit]]]
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,$x14,equal[znachenie[plsvekt[$x1,$x2],$x14],pls[znachenie[$x1,$x14],znachenie[$x2,$x14]]]],
  header      = info,
  filters     = [scanLevel[zero]],
  specifiers  = [],
  normalizers = [bistrpreobr[fiks[zero,two],normpls]]
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,$x14,equal[znachenie[knvekt[$x1,$x2],$x14],kn[znachenie[$x1,$x14],znachenie[$x2,$x14]]]],
  header      = leksuporyadochenie,
  filters     = [scanLevel[zero]],
  specifiers  = [],
  normalizers = [bistrpreobr[fiks[zero,two],normkn]]
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,$x14,equal[znachenie[dnvekt[$x1,$x2],$x14],dn[znachenie[$x1,$x14],znachenie[$x2,$x14]]]],
  header      = spuskoperandov,
  filters     = [scanLevel[zero]],
  specifiers  = [],
  normalizers = [bistrpreobr[fiks[zero,two],normdn]]
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,$x2,equal[imp[pls[$x1,$x2],$x2],imp[$x1,$x2]]],
  header      = replace[secondsubterm,standdn],
  filters     = [],
  specifiers  = [pusto],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,equal[pls[$x1,zero],$x1]],
  header      = secondsubterm,
  filters     = [],
  specifiers  = [scanLevel[one]],
  normalizers = []
},Rule {
  symbol      = "pls",
  theorem     = forall[$x1,equal[pls[$x1,one],otr[$x1]]],
  header      = secondsubterm,
  filters     = [],
  specifiers  = [scanLevel[one]],
  normalizers = []
}]